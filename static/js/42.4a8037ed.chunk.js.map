{"version":3,"file":"static/js/42.4a8037ed.chunk.js","mappings":"qMAEaA,E,OAAaC,GAAAA,GAAH,oT,SC2BvB,EAxBkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,8BACGF,EAAOG,OAAS,IACf,SAACL,EAAD,UACGE,EAAOI,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMR,GAAhD,SACGI,EAAMK,SAFFL,EAAME,GADA,OAW1B,C,+HCvBD,IAAMI,EAAW,+BACXC,EAAiB,kCAEjBC,EAAU,mCAEVC,EAAW,CACfC,SAAU,uBACVC,OAAQ,gBACRC,aAAc,U,oHCNHC,E,OAAmBnB,GAAAA,KAAH,2pB,SCwB7B,EAvBmB,SAAC,GAA2B,IAAzBoB,EAAwB,EAAxBA,kBAQpB,OACE,UAACD,EAAD,CAAkBE,SARC,SAAAC,GACnBA,EAAIC,iBAEJ,IAAMC,EAAcF,EAAIG,OAAOC,SAASf,MAAMgB,MAAMC,OACpDR,EAAkBI,EACnB,EAGC,WACE,8BACE,yCACA,kBAAOK,KAAK,OAAOC,KAAK,cAE1B,mBAAQD,KAAK,SAAb,sBAGL,E,SCoBD,EAjCe,WACb,OAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAO9B,EAAP,KAAe+B,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMX,EAAcU,EAAaE,IAAI,UAErCC,EAAAA,EAAAA,YAAU,WACHb,IAILc,EAAAA,EAAAA,IAAuBd,GACpBe,MAAK,SAAAC,GAAG,OAAIR,EAAUQ,EAAd,IACRC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAIG,QAApB,GACb,GAAE,CAACrB,IAOJ,OACE,iCACE,SAAC,EAAD,CAAYJ,kBAPU,SAAA0B,GAExBX,EAD6B,KAAVW,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,IAKI7C,IACEA,EAAOG,OAAS,GACf,SAAC2C,EAAA,EAAD,CAAW9C,OAAQA,KAEnB,qDAIT,C,6KClCD+C,EAAAA,EAAAA,SAAAA,QAAyBpC,EAAAA,GACzBoC,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAASnC,EAAAA,IAGJ,IAAMoC,EAAoB,WAC/B,OAAOF,EAAAA,EAAAA,IAAUjC,EAAAA,GAAAA,UAAmBwB,MAAK,SAAAC,GAAG,OAAIA,EAAIW,KAAKC,OAAb,GAC7C,EAEYd,EAAyB,SAAAd,GACpC,IAAM6B,EAAU,CACdC,OAAQ,CACNR,MAAOtB,IAIX,OAAOwB,EAAAA,EAAAA,IAAUjC,EAAAA,GAAAA,OAAiBsC,GAASd,MAAK,SAAAC,GAAG,OAAIA,EAAIW,KAAKC,OAAb,GACpD,EAEYG,EAAkB,SAAA/C,GAC7B,OAAOwC,EAAAA,EAAAA,IAAUjC,EAAAA,GAAAA,aAAwBP,GAAI+B,MAAK,SAAAC,GAAG,OAAIA,EAAIW,IAAR,GACtD,EAEYK,EAAkB,SAAAhD,GAC7B,OAAOwC,EAAAA,EAAAA,IACAjC,EAAAA,GAAAA,aAAwBP,EAAK,YACjC+B,MAAK,SAAAC,GAAG,OAAIA,EAAIW,KAAKM,IAAb,GACZ,EAEYC,EAAkB,SAAAlD,GAC7B,OAAOwC,EAAAA,EAAAA,IACAjC,EAAAA,GAAAA,aAAwBP,EAAK,YACjC+B,MAAK,SAAAC,GAAG,OAAIA,EAAIW,KAAKC,OAAb,GACZ,C","sources":["components/MovieList/MovieList.styled..js","components/MovieList/MovieList.jsx","constants/api.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  margin-top: 20px;\n  padding: 30px 50px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  color: rgb(50, 50, 50);\n  font-weight: 500;\n  font-size: 20px;\n\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\n\n  list-style: disc;\n\n  a:hover {\n    color: crimson;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { StyledList } from './MovieList.styled.';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      {movies.length > 0 && (\n        <StyledList>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </StyledList>\n      )}\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MovieList;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst API_KEY = '9e68854d69dbd1100bcb425bc2f51530';\n\nconst RESOURCE = {\n  trending: '/trending/movie/week',\n  search: '/search/movie',\n  movieDetails: '/movie/',\n};\n\nexport { BASE_URL, IMAGE_BASE_URL, API_KEY, RESOURCE };\n","import styled from 'styled-components';\n\nexport const StyledSearchForm = styled.form`\n  margin-bottom: 20px;\n  padding: 30px 50px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  gap: 20px;\n  max-width: 350px;\n\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);\n\n  label {\n    font-size: 18px;\n    font-weight: 500;\n  }\n  input {\n    padding: 5px 10px;\n    width: 100%;\n  }\n  button {\n    padding: 5px 20px;\n    margin: 0 auto;\n    width: max-content;\n\n    font-weight: 500;\n    letter-spacing: 0.5px;\n    text-transform: uppercase;\n\n    background-color: transparent;\n    border: 2px solid currentColor;\n    border-radius: 15px;\n\n    &:hover {\n      color: crimson;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledSearchForm } from './SearchForm.styled';\n\nconst SearchForm = ({ updateQueryString }) => {\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const searchQuery = evt.target.elements.title.value.trim();\n    updateQueryString(searchQuery);\n  };\n\n  return (\n    <StyledSearchForm onSubmit={handleSubmit}>\n      <label>\n        <p>Movie title:</p>\n        <input type=\"text\" name=\"title\" />\n      </label>\n      <button type=\"submit\">Search</button>\n    </StyledSearchForm>\n  );\n};\n\nSearchForm.propTypes = {\n  updateQueryString: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getMoviesBySearchQuery } from 'services/api';\nimport SearchForm from 'components/SearchForm';\nimport MovieList from 'components/MovieList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n\n    getMoviesBySearchQuery(searchQuery)\n      .then(res => setMovies(res))\n      .catch(err => console.log(err.message));\n  }, [searchQuery]);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <SearchForm updateQueryString={updateQueryString} />\n      {movies &&\n        (movies.length > 0 ? (\n          <MovieList movies={movies} />\n        ) : (\n          <b>There is no such movie</b>\n        ))}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nimport { BASE_URL, API_KEY, RESOURCE } from 'constants/api';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const getTrendingMovies = () => {\n  return axios.get(RESOURCE.trending).then(res => res.data.results);\n};\n\nexport const getMoviesBySearchQuery = searchQuery => {\n  const options = {\n    params: {\n      query: searchQuery,\n    },\n  };\n\n  return axios.get(RESOURCE.search, options).then(res => res.data.results);\n};\n\nexport const getMovieDetails = id => {\n  return axios.get(RESOURCE.movieDetails + id).then(res => res.data);\n};\n\nexport const getMovieCredits = id => {\n  return axios\n    .get(RESOURCE.movieDetails + id + '/credits')\n    .then(res => res.data.cast);\n};\n\nexport const getMovieReviews = id => {\n  return axios\n    .get(RESOURCE.movieDetails + id + '/reviews')\n    .then(res => res.data.results);\n};\n"],"names":["StyledList","styled","movies","location","useLocation","length","map","movie","to","id","state","from","title","BASE_URL","IMAGE_BASE_URL","API_KEY","RESOURCE","trending","search","movieDetails","StyledSearchForm","updateQueryString","onSubmit","evt","preventDefault","searchQuery","target","elements","value","trim","type","name","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","getMoviesBySearchQuery","then","res","catch","err","console","log","message","query","MovieList","axios","api_key","getTrendingMovies","data","results","options","params","getMovieDetails","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}